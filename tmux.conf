#####################
### MISC SETTINGS ###
#####################

# Keep a lot of history.
set -g history-limit 64000

# Don't rename windows automatically.
set -g allow-rename off

# In macOS, use the user login context instead of the startup context. This
# enables programs like `open` to work.
if-shell "uname | grep -qi Darwin" 'set -g default-command "reattach-to-user-namespace -l ${SHELL}"'

####################
### KEY BINDINGS ###
####################

# Remap prefix from Ctrl-b to Ctrl-a
set-option -g prefix C-a
unbind C-b

# Ensure we can send Ctrl-a to other apps
# (Hit C-a twice in a row to go to last window)
bind C-a last-window
# (Hit C-a a to emulate C-a in other apps)
bind a send-prefix

# Start numbering at 0
set -g base-index 0
set -g pane-base-index 0

# Allows for faster key repetition
set -sg escape-time 0

# shortcut to reload .tmux.conf
bind-key r source-file ~/.tmux.conf \; display "Reloaded!"

# Split panes with | and - => pwd
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

bind \ split-window -h
bind _ split-window -v

# Split panes within the pwd!

# Smart pane switching with awareness of vim splits
# Works great with Plugin 'christoomey/vim-tmux-navigator' set up in vim
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# vim-like resizing of panes
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# Don't use the mouse at all
set -g mouse off

# Get notifications of things happening in other windows
# Highlight in status line the name of window with activity
setw -g monitor-activity on
set -g visual-activity on

#####################
### COPY SETTINGS ###
#####################

# vim keys (especially in copy mode)
setw -g mode-keys vi

# Enter copy mode with C-a [
# Start copying with SPACE, end with ENTER
# Paste with C-a ]

# Copy entire visible contents of pane `capture-pane` command
# See contents of buffer: `show-buffer`
# Save buffer to a file: `save-buffer [filename]`

# make copy/paste more like vim
bind Escape copy-mode
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -Tcopy-mode-vi Escape send -X cancel
bind-key -Tcopy-mode-vi V send -X rectangle-toggle
unbind p
bind p paste-buffer

# Integrate with OS X clipboard!
#set -g default-command "reattach-to-user-namespace -l /bin/zsh"
set -g default-command "reattach-to-user-namespace -l /usr/local/bin/fish"

# Copy buffer to OS X clipboard
bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"

# Paste from OS X clipboard
bind C-v run "tmux set-buffer \"$(reattach-to-user-namespace pbpaste)\"; tmux paste-buffer"

#####################
##### COLORS ########
#####################

# Set the default terminal mode to 256color mode
set -g default-terminal "screen-256color"

# Set colors for the status line
set -g status-style fg=white,bg=colour19

# Set the color of the window list
setw -g window-status-style fg=cyan,bg=black

# Set colors for the active window
#setw -g window-status-current-style fg=white,bold,bg=red

# Change colors for pane borders
#setw -g pane-border-style fg=green,bg=black
#setw -g pane-active-border-style fg=white,bg=yellow

# shade out the inactive panes
#setw -g window-style fg=colour240,bg=colour235
#setw -g window-active-style fg=white,bg=black

# Active window tab
setw -g window-status-current-bg colour4
setw -g window-status-current-fg colour18
setw -g window-status-current-attr bold
setw -g window-status-current-format ' #W '

# Inactive window tab
setw -g window-status-bg colour21
setw -g window-status-fg colour18
setw -g window-status-attr bold
setw -g window-status-format ' #W '

# Pane borders
set -g pane-border-bg colour18
set -g pane-border-fg colour19
set -g pane-active-border-bg colour19
set -g pane-active-border-fg colour19

# Use a lighter background color for inactive panes.
if-shell "tmux -V | grep -qiE '2\.[1-9]\d*|[3-9]\d*\.\d+'" 'set -g window-style fg=colour21,bg=colour18'
if-shell "tmux -V | grep -qiE '2\.[1-9]\d*|[3-9]\d*\.\d+'" 'set -g window-active-style fg=colour7,bg=colour0'

#####################
#### STATUS LINE ####
#####################

# Command / message line
set -g message-style fg=white,bold,bg=black

# Status line has three parts: left panel, window list, right panel

set -g status-left "#[fg=green]TMUX"

# Don't need date and time on status bar - we have it on mac anyway
set -g status-right ""

#####################
###### WORKFLOW #####
#####################

# Turn a pane into a window - C-a !

# Take a pane from another window into the current window
# join-pane -s session:window.pane [-t target-session:window:pane]

# Zoom to current pane - C-a z (again to unzoom)

# View all sessions - C-a s
# Cycle through sessions - C-a ( and C-a )

# shortcut for synchronize-panes toggle (type in one pane and it goes to all)
bind C-s set-window-option synchronize-panes

# Log output to a text file on demand
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

#####################
###### PLUGINS ######
#####################

# Plugins - installed with tmux plugin manager:
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'christoomey/vim-tmux-navigator'

#set -g @plugin 'tmux-plugins/tmux-sensible'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
